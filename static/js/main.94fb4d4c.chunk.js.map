{"version":3,"sources":["Components/Header.js","Components/Catalogue.js","firebase.js","Components/Album.js","Components/Playlist.js","Components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","tabindex","class","for","type","name","id","href","Catalogue","state","artists","axios","url","method","responseType","params","api_key","limit","format","then","response","artistArray","data","artist","setState","console","log","className","this","map","index","key","target","rel","title","tabIndex","Component","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Album","album","playlist","src","image","alt","onClick","Playlist","userList","remove","smallImage","Search","handleChange","e","artistSearch","value","handleSubmit","preventDefault","userSearch","albums","topalbums","newState","push","topAlbums","catch","error","addToPlaylist","database","ref","removeFromPlaylist","child","on","albumState","val","albumData","action","onSubmit","htmlFor","placeholder","aria-label","onChange","alb","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.94fb4d4c.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Header = () => {\n    return (\n        <header>\n            <nav>\n            \n                <h1>got music?</h1>\n\n                <div tabindex=\"0\" class=\"hamburger\">\n\n                    <label class=\"visually-hidden\" for=\"ham-check\">Open menu</label>\n                    <input type=\"checkbox\" name=\"hamburger\" id=\"ham-check\" class=\"ham-input\"/>\n\n                    <span></span>\n                    <span></span>\n                    <span></span>\n\n                    <ul class=\"top-nav\" id=\"ham\">\n                        <li tabindex=\"0\" class=\"ham-link\">\n                            <a href=\"#home\">Home</a>\n                        </li>\n                        <li tabindex=\"0\" class=\"ham-link\">\n                            <a href=\"#playlist\">Playlist</a>\n                        </li>\n\n                        <li tabindex=\"0\" class=\"ham-link\">\n                            <a href=\"#contact\">Contact</a>\n                        </li>\n                    </ul>\n                    \n                </div>\n\n            </nav>\n  \n        </header>\n    );\n}\n\n\n\n\nexport default Header;","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Catalogue extends Component {\n    constructor (){\n\n        super ();\n\n        this.state = {\n\n            // Holds all artists\n            artists: []\n        }\n    }\n\n    componentDidMount() {\n        const apiKey = \"a0b4a2a68217ad3b52fe53e7b7ba0679\";\n    \n        // First API call to grab top artists\n        axios ({\n            url: 'https://ws.audioscrobbler.com/2.0/',\n            method: 'GET',\n            responseType: 'json',\n            params: {\n                api_key: apiKey,\n                method: 'chart.getTopArtists',\n                limit: '10',\n                format: 'json'\n            } \n        }).then ((response) => {\n            const artistArray = response.data.artists.artist;\n    \n            // Set state to the whole array to be manipulated later in render\n            this.setState({\n                artists: artistArray\n            })\n\n            console.log(artistArray);\n         \n        })\n    }\n\n    render (){\n        \n        return (\n            <section className=\"top-artists\">\n\n                <h2>Today's Top 10</h2>\n\n                <div className=\"artist-list-container\">\n                    {this.state.artists.map((artist, index) => {\n                        return (\n\n                            <div className=\"artist-list\" key={index}>\n                                <div className=\"rank-container\">\n                                    <p className=\"rank\">{index + 1}</p>\n                                </div>\n\n                                <a href={`${artist.url}`}\n                                className=\"artist-container\"\n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                title={`See ${artist.name}'s albums`}\n                                tabIndex=\"0\">\n                                    <p className=\"artist\"> {artist.name}</p>\n                                </a>\n                            </div>\n                        )\n                    })}\n                </div>\n\n            </section>\n        );\n    }\n}\n\n\n\nexport default Catalogue;\n\n","import firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCZbC3Diw66i3hj_Vp9RI5ncgBk4CIhTSA\",\n    authDomain: \"got-music.firebaseapp.com\",\n    databaseURL: \"https://got-music.firebaseio.com\",\n    projectId: \"got-music\",\n    storageBucket: \"got-music.appspot.com\",\n    messagingSenderId: \"693014542927\",\n    appId: \"1:693014542927:web:1769fd7976add77afa883a\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n\nexport default firebase;","import React from 'react';\nimport { AiOutlineHeart } from 'react-icons/ai';\n\n// Each individual album\nconst Album = ({album, playlist}) => {\n    // destructure album parameter as a prop to be used in the search function\n    return (\n        \n        <div className=\"album-container\"> \n                                \n            <img src={album.image === '' ? 'https://imgur.com/rrF0ZYG'\n            :\n            album.image} alt={album.title}/>\n\n            <div className=\"like-album\">\n\n                <p title=\"Click heart to add to collection\">{album.title}\n                </p>\n                {/* On click, we want to access the addtoPlaylist function in the Search component */}\n                <AiOutlineHeart onClick={() => playlist(album)}/>\n\n            </div>\n        </div>\n    )\n}\n\n\n\nexport default Album;\n\n","import React from 'react';\nimport { FaTimes, FaPlay } from 'react-icons/fa';\n\n\nconst Playlist = ({userList, remove}) => {\n\n    return (\n\n        <div className=\"user-album\">\n\n            <div className=\"selected-album\"> \n            \n                <div className=\"img-container\">\n                    <img src={userList.name.smallImage} alt={userList.name.title}/>\n                </div>\n\n                <div className=\"list-info\">\n                    <h5>{userList.name.title}</h5>\n                    <p className=\"artist-name\">{userList.name.artist}</p>\n                    <a className=\"listen\"\n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\" \n                    tabIndex=\"0\" \n                    href={userList.name.url}>\n                    <FaPlay /> Listen to {userList.name.title} on LastFm</a>\n                </div>\n\n            </div>\n\n            <div className=\"remove-album\">\n                <FaTimes className=\"delete\" title={'Remove album from playlist'} onClick={() => remove(userList.album)}/>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Playlist\n\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport firebase from \"../firebase\";\n\n\nimport Album from './Album';\nimport Playlist from './Playlist';\n\n\nclass Search extends Component {\n\n    constructor (){\n\n        super();\n\n        this.state = {\n            // Tracks search input\n            artistSearch: \"\",\n            // Results of axios call based on artistSearch\n            topAlbums: [], \n            // User selected books for personal lists (FB)\n            userList: [],\n        }\n    }\n\n    componentDidMount (){\n        // Firebase Setup\n        // Access database \n        const dbRef = firebase.database().ref();\n\n        // Listen for any changes in the database and use a callback to get the info\n        dbRef.on('value', (response) => {\n            // Variable to store new state\n            const albumState = []\n\n            // Store response from search to Firebase\n            // .val gets us the \"values\" from the database\n            const data = response.val() \n\n            // Data is an object, so we need a loop to grab each album pushed into the array\n            for (let album in data) {\n\n                const albumData = {\n                    album: album,\n                    name: data[album],\n                }\n\n                // Push these values into an array we can access in state\n                albumState.push(albumData)\n            } \n\n            // Make this live and able to track by setting this to state\n            this.setState ({\n                userList: albumState\n            })\n\n            console.log(this.state.userList)\n        })\n    }\n\n    // Track value typed in search bar\n    handleChange = (e) => {\n        this.setState({\n            artistSearch: e.target.value\n        })\n\n    }\n\n\n    // Search for top albums by artist on submit\n    handleSubmit = (e) => {\n        e.preventDefault()\n        this.userSearch()\n\n        // Clear search\n        this.setState ({\n            artistSearch: \"\"\n        })\n        \n    }\n    \n    // Make second axios call to grab artist albums\n    userSearch = () => {\n        const apiKey = 'a0b4a2a68217ad3b52fe53e7b7ba0679'\n\n        axios({\n            url: 'https://ws.audioscrobbler.com/2.0/',\n            method: 'GET',\n            responseType: 'json',\n            params: {\n                api_key: apiKey,\n                method: 'artist.getTopAlbums',\n                artist: this.state.artistSearch,\n                limit: '20',\n                format: 'json'\n            }\n\n        }).then((response) => {\n            const albums = response.data.topalbums.album\n\n            // Make a copy of the array data we need\n            const newState = []\n\n            albums.map(function(album) {\n                \n                return newState.push({\n                    title: album.name,\n                    artist: album.artist.name,\n                    image: album.image[3][\"#text\"],\n                    smallImage: album.image[2][\"#text\"],\n                    url: album.url,\n                })\n            })\n\n            // Set state to searched albums            \n            this.setState({\n                topAlbums: newState,\n            })\n\n\n        }).catch((error) => {\n\n            console.log('No data found.')\n        \n        })\n\n\n    }\n\n    // Select album to add to playlist\n    addToPlaylist = (album) => {\n        // Get firebase\n        const dbRef = firebase.database().ref()\n\n        dbRef.push(album)\n        \n\n    }\n\n\n    // Remove album from playlist on click\n    removeFromPlaylist = (album) => {\n        // Pull off album ftom the child of the root, not the whole root\n        const dbRef = firebase.database().ref()\n\n        dbRef.child(album).remove()\n    \n        \n    }\n\n   \n\n    \n    render (){\n        return(\n            <div className=\"build-album wrapper\">\n                <section className=\"search\">\n\n                    <h2>Search an artist</h2>\n\n                    <div className=\"search-container\">\n\n                    <form className=\"search-albums\" action=\"submit\"\n                    onSubmit={this.handleSubmit}>\n            \n                        <label\n                        className=\"sr-only\"\n                        htmlFor=\"search\">\n                        </label>\n\n                        <input \n                        type=\"search\" \n                        placeholder=\"Enter artist name\"\n                        id= \"search\"\n                        name=\"search\"\n                        aria-label=\"Search through site content\"\n                        title=\"Search by artist name\"\n                        onChange={this.handleChange}\n                        value={this.state.artistSearch}>\n                        </input>\n\n                        <button type=\"submit\">Get Music</button>\n                \n                    </form>\n                    \n                    </div>\n                </section>\n\n                <div className=\"spacer\"></div>\n\n                <h3>Build your album collection</h3>\n\n                <section className=\"top-albums\">\n            \n                    {/* this.state.topAlbums is an object holding the necessary info for the functional component */}\n                    {this.state.topAlbums.map((album, index)=> {\n                        return (\n\n                            // If the album title is (null) or \"?\", don't show anything for that album result, if there's a valid title show the information for that album\n                            album.title === \"(null)\" || album.title === \"?\" ? ''\n                            :\n                            // Pass album info and playlists down as an object held in topAlbums from the axios call and if the album exists\n                            // We want to be able to click the heart in the Album component and push it to the database held here\n                            <Album key={index} album={album} playlist={this.addToPlaylist}/>\n                            \n                        )\n                    })}\n\n                </section>\n                \n                <div className=\"spacer\"></div>\n\n                <h3 id=\"playlist\">Your Playlist</h3>\n                <section  className=\"user-playlist\">\n\n                    <div className=\"playlist-container\">\n                        {this.state.userList.map((alb, index) => {\n                            \n                            return(\n\n                                <Playlist key={index} userList={alb} remove={this.removeFromPlaylist}/>\n \n                            )\n                            \n                        })}\n\n                    </div>\n\n                </section>\n\n                <div className=\"spacer\"></div>\n                \n            </div>\n \n        );\n\n    }\n}\n\n\nexport default Search;\n\n","import React, { Component } from 'react';\n// import { \n//   BrowserRouter as Router, \n//   Route, Link } from 'react-router-dom';\nimport './App.css';\n\n\nimport Header from './Components/Header'\nimport Catalogue from './Components/Catalogue';\nimport Search from './Components/Search';\n\n\n\nclass App extends Component {\n \n  render (){\n\n    return (\n      <div className=\"App\">\n        <Header />\n\n        <Catalogue />\n\n        <Search />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}